---
title: "Re-Design"
format: html
editor: visual
---

## Re-Design : 

I want to make a bad graph better using what I know. I aim to create a perfect and easily understandable graph. Additionally, I plan to visualize the data in various graphs to check if any new information emerges beyond my current understanding.

**The SAS website gave me the original data for "Immigrant Visa Number Use by Category Fiscal Year 2014:**

![](images/visas_table_orig (1).png){fig-align="center" width="500"}

##### Fig1:  **2024 Immigration Visa Data Table**

I'm making a data frame called "**ImmigrantVisaNumber2014**" and adding columns named "Category," "**Visa Issuances at Offices Abroad**," and "**USCIS Adjustments**", I'm putting in the data from **Fig1** into these columns.

```{r}
ImmigrantVisaNumber2014 = data.frame( 
Category = factor(c("F1", "F2A", "F2B", "F4", "E1", "E2", "E3", "E4", "E5", "DV"), levels = c("F1", "F2A", "F2B", "F4", "E1", "E2", "E3", "E4", "E5", "DV")), 
Visa_Issuances_At_Offices_Abroad = c(21511, 80041, 15137, 21931, 59140, 1680, 1880, 7088, 1489, 9228), 
USCIS_Adjustments = c(2480, 9451, 2382, 2100, 7020, 38928, 47191, 35611, 6798, 1464) 
) 
```

#### **Re-Design 1: Bar Plot with GGplot2** 

-   Implemented the GGplot2 library to re-imagine the visualization, showcasing a bar plot utilizing the given data values.

```{r}
library(ggplot2)  
melted_data = reshape2::melt(ImmigrantVisaNumber2014, id.vars = "Category")  

# Reorder the levels of the variable factor 
melted_data$variable = factor(melted_data$variable, levels = 
c("Visa_Issuances_At_Offices_Abroad","USCIS_Adjustments")) 
ggplot(melted_data, aes(x = Category, y = value, fill = variable)) +
geom_bar(stat = "identity", width = 0.4) +  
labs(title = "Immigrant Visa Number\nUse By Category\nFiscal Year 2014",x = "Category", y = "Count") +  
scale_fill_manual(values = c("USCIS_Adjustments" = "indianred", "Visa_Issuances_At_Offices_Abroad" = "steelblue")) +  
theme(legend.position = "bottom", 
      text = element_text(size = 10, face = "bold"), 
      axis.text.x = element_text(size = 6, face = "bold"), 
      axis.text.y = element_text(size = 6, face = "bold"), 
      axis.title.x = element_text(size = 10, face = "bold"), 
      axis.title.y = element_text(size = 10, face = "bold"), 
      plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
      legend.title = element_text(face = "bold")) + 
guides(fill = guide_legend(title = NULL)) 

```

The initial graph used a 3D model, which can sometimes be confusing and make it challenging for viewers to understand the data. The redesigned graph, now in a simpler 2D format, is clearer and more user-friendly.

![](images/fig2-01.jpg){fig-align="center"}

I made a change in the Redesign1 by using **Plotly library** and **Position = 'dodge'** and **width** of the bars are **0.7** to compare 'Visa Issuances at Offices Abroad' and 'USCIS Adjustments' more effectively. In the initial design, I found a bit of difficulty in understanding the bar representing 'Visa Issuances at Offices Abroad,' so I placed both bars side by side to enhance clarity and better comprehend the comparison

```{r}
library(ggplot2)
library(reshape2)
library(plotly)

# Melt the data frame
melted_data <- reshape2::melt(ImmigrantVisaNumber2014, id.vars = "Category")

# Reorder the levels of the variable factor
melted_data$variable <- factor(melted_data$variable, levels = c("Visa_Issuances_At_Offices_Abroad", "USCIS_Adjustments"))

# Create a ggplot object with dodge positioning
gg <- ggplot(melted_data, aes(x = Category, y = value, fill = variable)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.7) +
  labs(title = "Immigrant Visa Number Use By Category Fiscal Year 2014", x = "Category", y = "Count") +
  scale_fill_manual(values = c("USCIS_Adjustments" = "indianred", "Visa_Issuances_At_Offices_Abroad" = "steelblue")) +
  theme(legend.position = "bottom",
        text = element_text(size = 10, face = "bold"),
        axis.text.x = element_text(size = 6, face = "bold"),
        axis.text.y = element_text(size = 6, face = "bold"),
        axis.title.x = element_text(size = 10, face = "bold"),
        axis.title.y = element_text(size = 10, face = "bold"),
        plot.title = element_text(size = 9, face = "bold", hjust = 0.5),  # Add a comma here
        legend.title = element_text(face = "bold")) +
  guides(fill = guide_legend(title = NULL))

# Convert ggplot object to plotly object
plotly_gg <- ggplotly(gg)

# Modify the plotly object to move the legend below
plotly_gg <- plotly_gg %>%
  layout(legend = list(orientation = "h", y = -0.2, x = 0.2))

# Print the interactive plot
print(plotly_gg)

```

After redesigning the graph with Plotly, I've made it more user-friendly and easy to understand for everyone.

![](images/1 .png){fig-align="center" width="700"}

**Fig3: Redesigned Graph (using Plotly)**

#### **Re-Design 2: Line Plot with GGplot2** 

I'm examining the visa trends for the year 2024, specifically focusing on the counts for 'Visa Issuances at Offices Abroad' and 'USCIS Adjustments.' By analyzing these columns individually, I aim to gain insights into the distribution and trends of visas issued in each category for the specified year.

```{r}
library(ggplot2) 
library(plotly) 
base_plot = ggplot(melted_data, aes(x = Category, y = value, color = variable, group = variable)) + geom_line() + facet_wrap(~variable, scales = "free_y") + 
labs(title = "Immigrant Visa Number Use By Category FY 2014", x = "Category", y = "Count") + 
scale_color_manual(values = c("Visa_Issuances_At_Offices_Abroad" = "skyblue", "USCIS_Adjustments" = "red")) + theme(legend.position = "bottom") 

# Convert ggplot to a plotly object 
highlight_plot = ggplotly(base_plot, tooltip = c("Category", "value", "variable")) 

# Move the legend below the plot 
highlight_plot = highlight_plot %>%  
layout(legend = list(orientation = "h", x = 0.5, y = -0.1, traceorder = 'normal')) 

# Adjust the title size or width 
highlight_plot = highlight_plot %>%  
layout(title = list(text = "Immigrant Visa Number Use By Category FY 2014", x = 0.5, xanchor = "center")) 

# Display the interactive plot 
highlight_plot 
```

I designed individual line graphs to better understand the data set. For 'Visa Issuances at Offices Abroad,' the values go up to **80,041**, while for **'USCIS Adjustments',** the highest values reach **47,191**. To comprehend the trends in both visa issuances and USCIS adjustments, I created two separate line graphs for a clearer analysis.

![](images/redesign2.png){fig-align="center"}

Redesign_3

```{r}
library(ggplot2) 
library(plotly) 

base_plot <- ggplot(melted_data, aes(x = Category, y = value, size = value, color = variable)) + geom_point(alpha = 0.9) + labs(title = "Bubble Chart of Visa Issuances and USCIS Adjustments", x = "Category", y = "Count") + scale_color_manual(values = c("Visa_Issuances_At_Offices_Abroad" = "skyblue", "USCIS_Adjustments" = "red")) + 
theme( text = element_text(size = 10, face = "bold"), 
       axis.text.x = element_text(size = 10, face = "bold"), 
       axis.text.y = element_text(size = 10, face = "bold"), 
       axis.title.x = element_text(size = 12, face = "bold"), 
       axis.title.y = element_text(size = 12, face = "bold"), 
       plot.title = element_text(size = 10, face = "bold", hjust = 0.5)) 

# Convert ggplot to a plotly object 
highlight_plot <- ggplotly(base_plot, tooltip = c("Category", "value", "variable")) 

# Customize the layout 
highlight_plot <- highlight_plot %>%layout( 
  title = list(text = "Bubble Chart of Visa Issuances and USCIS Adjustments", x = 0.5, xanchor = "center"), 
  legend = list(orientation = "h", x = 0.1, y = -0.3, traceorder = 'normal', title = list(text = NULL))) 

# Display the interactive plot 
highlight_plot 

 
```
